name: Publish & Release

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

permissions:
  contents: write
  packages: write

concurrency:
  group: ${{ github.ref }}-publish-release
  cancel-in-progress: true

jobs:
  build-and-pack:
    name: Build & Pack
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET tooling
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 8.0.x
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '6.x'
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4
        with:
          configFilePath: ./.github/gitversion.yml
      - name: Restore
        run: dotnet restore
      - name: Build
        run: >-
          dotnet build --configuration Release --no-restore
          -p:ContinuousIntegrationBuild=true
          -p:CI=true
          -p:Version=${{ steps.gitversion.outputs.assemblySemVer }}
          -p:PackageVersion=${{ steps.gitversion.outputs.assemblySemVer }}
          -p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }}
          -p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }}
          -p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}
          /bl:"${{ runner.temp }}/_artifacts/build_logs/build.binlog"
      - name: Test
        run: >-
          dotnet test --configuration Release --no-build --verbosity normal
          -p:ContinuousIntegrationBuild=true
          -p:CI=true
          -p:Version=${{ steps.gitversion.outputs.assemblySemVer }}
          -p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }}
          -p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }}
      - name: Pack NuGet
        run: |
          mkdir -p package
          dotnet pack src/Json.Masker.Newtonsoft/Json.Masker.Newtonsoft.csproj --configuration Release --no-build -o package -p:ContinuousIntegrationBuild=true -p:CI=true -p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} -p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} -p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }} -p:PackageVersion=${{ steps.gitversion.outputs.assemblySemVer }} -p:Version=${{ steps.gitversion.outputs.assemblySemVer }}
          dotnet pack src/Json.Masker.SystemTextJson/Json.Masker.SystemTextJson.csproj --configuration Release --no-build -o package -p:ContinuousIntegrationBuild=true -p:CI=true -p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} -p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} -p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }} -p:PackageVersion=${{ steps.gitversion.outputs.assemblySemVer }} -p:Version=${{ steps.gitversion.outputs.assemblySemVer }}

      - uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: |
            package/*.nupkg
            package/*.snupkg
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      nuget-version: ${{ steps.gitversion.outputs.assemblySemVer }}

  publish-nuget:
    name: Publish (NuGet)
    runs-on: ubuntu-latest
    needs: [build-and-pack]
    env:
      NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
    steps:
      - name: NuGet token not supplied
        if: env.NUGET_TOKEN == ''
        run: echo "NUGET_TOKEN secret is not configured. Skipping publish step."
      - name: Setup .NET tooling
        if: env.NUGET_TOKEN != ''
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 8.0.x
      - uses: actions/download-artifact@v5
        if: env.NUGET_TOKEN != ''
        with:
          name: nupkg
          path: package
      - name: Publish Json.Masker.Newtonsoft package
        if: env.NUGET_TOKEN != ''
        run: dotnet nuget push package/Json.Masker.Newtonsoft*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ env.NUGET_TOKEN }} --skip-duplicate
      - name: Publish Json.Masker.SystemTextJson package
        if: env.NUGET_TOKEN != ''
        run: dotnet nuget push package/Json.Masker.SystemTextJson*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ env.NUGET_TOKEN }} --skip-duplicate
changelog-release:
  name: Update Changelog & Release (git-chglog)
  runs-on: ubuntu-latest
  needs: [build-and-pack]
  permissions:
    contents: write
  steps:
    - name: Checkout main with tags
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        fetch-tags: true
        ref: main

    - uses: actions/download-artifact@v5
      with:
        name: nupkg
        path: package

    - name: Install git-chglog
      run: |
        CHGLOG_VERSION="0.15.4" # latest version in the time of writing
        curl -sL -o git-chglog \
          "https://github.com/git-chglog/git-chglog/releases/download/v${CHGLOG_VERSION}/git-chglog_linux_amd64"
        chmod +x git-chglog

    - name: Generate CHANGELOG.md (full)
      run: |
        ./git-chglog -o CHANGELOG.md
        if git diff --quiet -- CHANGELOG.md; then
          echo "NO_CHANGELOG_CHANGES=1" >> $GITHUB_ENV
        fi

    - name: Commit CHANGELOG.md
      if: env.NO_CHANGELOG_CHANGES != '1'
      run: |
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "chore(changelog): update [skip ci]"
        git push

    - name: Generate release notes for latest tag
      id: notes
      run: |
        LATEST="${{ needs.build-and-pack.outputs.tag }}" # e.g. v0.2.2-2
        # find previous tag (if any)
        PREV=$(git tag --sort=-creatordate | sed -n '2p' || true)
        if [ -z "$PREV" ]; then
          # first release: only this tag
          ./git-chglog "$LATEST" > RELEASE_NOTES.md
        else
          ./git-chglog "$PREV..$LATEST" > RELEASE_NOTES.md
        fi
        echo "notes_ready=true" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        draft: false
        name: ${{ needs.build-and-pack.outputs.tag }}
        tag:  ${{ needs.build-and-pack.outputs.tag }}
        bodyFile: RELEASE_NOTES.md
        token: ${{ github.token }}
        artifacts: "package/*.nupkg,package/*.snupkg"
